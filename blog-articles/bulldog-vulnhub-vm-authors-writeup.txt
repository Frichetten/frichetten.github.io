It's been a pretty busy few months for me, I graduated college, released a VM on VulnHub, got a certification (GPEN), and have been redoing my website for the 4th (5th?) time. After all that I've come to realize that I've left my blog pretty desserted. I've started a few posts on what I thought about GPEN, better beaconing techniques for Red Teams, Python List Comprehensions, but I decided it would be better for me to do a writeup on my own VM.


I've been shocked by the number of people who are willing to spend their own time writing up how they got root on the machine. It's both very flattering, and humbling. In honor of that effort, I decided I should do a writeup on my thoughts about the machine, the decisions I made in making it, and hopefully provide others with a roadmap as to how they should make their own vulnerable VMs.

To any reading this, yes the sequel is coming soonish. I've really tried to pull out all the stops with the next one and create something interesting. It will be much more challenging, but I hope it will be more rewarding for those who do manage to topple it.

When building a vulnerable VM, the author is trying to teach the player something. It can be a particular technique, a unique target, or even tell a story. With this particular VM I wanted to do a little bit of all three.

Reconaisancce

First things first: the approach. What is the external posture of the box? When you boot up the box it will show you some nice art and the IP of the machine. I did this as a general nicety so that playerrs could get right to work, rather than having to run arp-scan or netdiscover. 

1.png


If the playwer were to run an Nmap scan against the target you will quickly find 3 services running on the machine. Those are on ports 23, 80, and 8080. 

2.png

Now, this is likely the sloppiest part of the entire machine. I wanted to create some general subterfuge upfront to get the player looking around and thinking. The two web services running on port 80 and 8080 are identical, in fact they are the same process, it's just that iptables is forwarding traffic from 8080 to 80. 

Additionally, that service on 23 is not Telnet, rather it is SSH. This was to reward players to go beyond running a bare-bones Nmap scan, and make them interested if they did a version scan. Unfortunately, trying to brute force it should return the user with nothing. 

The reason I call this sloppy is because most players (going by their writeups) completely saw through this and immediately went for the web app. I was hoping more people would wonder why the same web app would be running on different ports and perhaps try to detect differences between the two.

After the player going to the web app they are greated with the following.

3.png

This is part of the story I was trying to express to the player. If the player goes to the public notice page they will find that 

